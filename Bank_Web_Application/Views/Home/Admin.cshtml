@{
    ViewData["Title"] = "Admin Page";
}


<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Meta tags and title remain the same -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Add this line to your HTML head section -->

    <title>Admin Dashboard</title>
    <style>

        .card {
            height: auto;
            background: white;
            color: black;
            border-radius: 12px;
            box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.123);
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: flex-start;
            transition-duration: .5s;
        }

        .profileImage {
            width: 160px;
            height: 160px;
            border-radius: 50%;
            overflow: hidden;
            margin: 20px;
        }

            .profileImage img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

        .userDetails {
            width: 50%;
            text-align: left;
            padding: 20px;
            display: flex;
            flex-direction: column;
            justify-content: left;
        }

        .welcomeMessage {
            text-align: right;
            margin-top: 10px;
            margin-right: 20px;
        }

            .welcomeMessage.welcomeMessage-right {
                font-size: 2rem;
                font-weight: 700;
                text-align: right;
                margin-top: auto;
                margin-right: 20px;
                position: absolute;
                top: 0;
                right: 10px;
                bottom: 0;
                display: flex;
                align-items: center;
                background: linear-gradient(45deg, #655de8, #4F46E5);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
            }

        .edit-button {
            font-weight: 500;
            font-size: 0.8em;
            cursor: pointer;
            color: #4F46E5;
            text-align: left;
            margin-top: 20px;
        }


        .name {
            font-size: 1.5em;
            font-weight: 700;
            color: black;
            letter-spacing: 0.5px;
            margin-bottom: 2px;
        }

        .email, .phoneNo {
            font-size: 0.84em;
            color: black;
            letter-spacing: 0.2px;
            margin-bottom: 2px;
        }

        .profile-card {
            display: flex;
            flex-direction: row;
            width: 100%;
            margin-bottom: 10px;
        }

        .createUser {
            background-color: #f5f5f5;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center; /* Center the content horizontally */
            margin-bottom: 10px;
        }

        .card-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 15px;
        }

        .form {
            position: relative;
            margin: auto;
            margin-top: 5rem;
            background-color: #fff;
            display: block;
            padding: 1rem;
            max-width: 350px;
            border-radius: 0.5rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        .form-title {
            font-size: 1.25rem;
            line-height: 1.75rem;
            font-weight: 600;
            text-align: center;
            color: #000;
        }

        .input-container {
            position: relative;
        }

            .input-container input, .form button {
                outline: none;
                border: 1px solid #e5e7eb;
                margin: 8px 0;
            }

            .input-container input {
                background-color: #fff;
                margin-left: 50px;
                padding: 1rem;
                padding-right: 3rem;
                font-size: 0.875rem;
                line-height: 1.25rem;
                width: 100%;
                border-radius: 0.5rem;
                box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            }

            .input-container span {
                display: grid;
                position: absolute;
                top: 0;
                bottom: 0;
                right: 1rem;
                padding-left: 1rem;
                place-content: center;
            }

                .input-container span svg {
                    padding-block-end: 0.125rem;
                    color: #9CA3AF;
                    width: 1rem;
                    height: 1rem;
                }

        .submit {
            display: block;
            margin-left: 50px;
            padding: 0.75rem 1.25rem;
            background-color: #4F46E5;
            color: #ffffff;
            font-size: 0.875rem;
            line-height: 1.25rem;
            font-weight: 500;
            width: 100%;
            border-radius: 0.5rem;
            text-transform: uppercase;
        }

        /* User Management Section Styles */

        .userManagement {
            display: flex;
            justify-content: space-around;
            background-color: #f5f5f5;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 10px;
        }

        h2 {
            font-size: 1.5rem;
            color: #333;
            margin-bottom: 15px;
            margin-right: 20px;
        }

        .userManagement button {
            padding: 10px 20px;
            background-color: #4F46E5;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-right: 5px;
        }

        .create-user-button {
            font-weight: bold;
            cursor: pointer;
            color: #4F46E5;
            position: absolute;
            top: 0;
            left: 0;
        }

        .userManagement .user-list {
            display: flex;
            flex-direction: column;
            align-items: flex-end; /* Align content to the right side */
        }

            .userManagement .user-list .action-buttons {
                margin-top: 5px; /* Add space between table and buttons */
            }

                .userManagement .user-list .action-buttons button {
                    margin-bottom: 5px; /* Add spacing between stacked buttons */
                }

        .search-users {
            display: flex;
            flex-direction: column;
            margin-bottom: 15px;
            margin-right: 20px;
        }

        .search-input {
            display: flex;
        }

            .search-input input {
                flex: 1;
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 5px;
                outline: none;
            }

        .search-button button {
            padding: 10px;
            background-color: #4F46E5;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
            width: 100%; /* Make the button the same width as the input field */
        }


        /* Button Styles (Reused from User Management Section) */

        button {
            padding: 10px 20px;
            color: white;
            border: none;
            border-radius: 5px;
            margin: 10px 0px;
            cursor: pointer;
        }

            button:hover {
                background-color: #655de8;
            }

        /* User Listing Table Styles */

        table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
        }

            table th, table td {
                border: 1px solid #ccc;
                padding: 10px;
                text-align: left;
            }

        thead {
            background-color: #4F46E5;
            color: black;
        }

        tr:nth-child(even) {
            background-color: #f5f5f5;
        }

        tr:nth-child(odd) {
            background-color: #fff;
        }

        /* Transaction Management Section Styles */
        .transactionManagement {
            display: flex;
            justify-content: space-around;
            background-color: #f5f5f5;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 10px;
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
        }

            .transactionManagement h2 {
                font-size: 1.5rem;
                color: #333;
                margin-bottom: 15px;
            }

        .search-transactions {
            display: flex;
            flex-direction: column;
            margin-bottom: 15px;
        }

        .search-input {
            display: flex;
        }

            .search-input input {
                flex: 1;
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 5px;
                outline: none;
            }

        .search-button button {
            padding: 10px;
            background-color: #4F46E5;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
            width: 100%; /* Make the button the same width as the input field */
        }

        .transaction-list table {
            width: 100%;
            border-collapse: collapse;
        }

        .transaction-list th, .transaction-list td {
            border: 1px solid #ccc;
            padding: 10px;
            text-align: left;
        }

        /* Add any additional styling as needed */

        .filter-sort-options {
            margin-left: 10px; /* Updated margin for better spacing */
            margin: 10px 0; /* Updated margin for better spacing */
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }

            .filter-sort-options label, .filter-sort-options select {
                margin-right: 10px; /* Updated margin for better spacing */
                margin-left: 10px; /* Updated margin for better spacing */
                margin-bottom: 4px; /* Slightly reduced margin for better spacing */
                font-size: 16px; /* Adjust font size for better readability */
            }

            /* Optional: Add a border to the select elements to make them stand out more */
            .filter-sort-options select {
                margin-left: 10px; /* Updated margin for better spacing */
                border: 1px solid #ccc;
                border-radius: 5px;
                padding: 8px;
            }


        /* Transaction Listing Table Styles */

        .transaction-list table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
        }

            .transaction-list table th, .transaction-list table td {
                border: 1px solid #ccc;
                padding: 10px;
                text-align: left;
            }

        .transaction-list thead {
            background-color: #4F46E5;
            color: black;
        }

        .transaction-list tr:nth-child(even) {
            background-color: #f5f5f5;
        }

        .transaction-list tr:nth-child(odd) {
            background-color: #fff;
        }

        /* Add styles for security and access control section */

        /* Activity Logs Section Styles */

        .activityLogs {
            background-color: #f5f5f5;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 10px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .section-title {
            font-size: 1.5rem;
            color: #333;
            margin-bottom: 15px;
        }

        .log-console {
            background-color: black;
            color: #00FF00;
            padding: 10px;
            border-radius: 5px;
            white-space: pre-wrap;
            max-height: 600px;
            width: 90%;
            overflow-y: auto;
            font-family: monospace;
        }

            .log-console code {
                font-family: monospace;
            }

        .popupContainer {
            position: fixed;
            display: none;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            z-index: 10;
            top: 0;
            left: 0;
        }

        .popupShow {
            display: flex;
        }

        .popupCard {
            max-height: 50vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 2rem;
            border-radius: 15px;
            background-color: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }

        .popupCloseBtn {
            color: darkgrey;
            position: absolute;
            top: 5%;
            right: 5%;
            border: none;
            background-color: transparent;
        }

        .editField {
            width: 100%;
            padding: 10px;
            margin: 5px;
            border: 1px solid #ccc;
            border-radius: 10px;
        }

        .editFieldLabel {
            border: none;
            margin: 5px;
        }

        .sendButton {
            width: 100%; /* Make the button as long as the input fields */
            padding: 10px;
            margin: 5px;
            border: 1px solid #ccc;
            border-radius: 10px;
            background-color: #4F46E5;
            color: white;
            cursor: pointer;
        }

        .error-message {
            color: red;
            margin-top: 5px;
        }

        .editTitle {
            font-size: 1.5em;
            margin-top: 20px;
            font-weight: bold;
        }

        .buttonCell{
            display: flex;
justify-content: center;
align-items: center;
        }

    </style>
</head>
<body>

    <div class="popupContainer" id="popup">
        <div class="popupCard card">
            <button class="popupCloseBtn" onclick="toggleCard()">X</button>
            <div class="edit">
                <p class="editTitle">Edit Details</p>
                <p class="editFieldLabel">Password</p>
                <input type="text" id="editName" class="editField">
                <p class="editFieldLabel">Confirm Password</p>
                <input type="text" id="editPhoneNo" class="editField">
                <button class="sendButton" onclick="sendTransaction()">Edit</button>
                <p id="errorMessage" class="error-message"></p>
            </div>
        </div>
    </div>

    <div class="card-container">
        <!-- Admin Profile Information Section -->
        <div class="profile-card card">
            <div class="profileImage">
                <img src="https://picsum.photos/200/200" alt="Profile Image">
            </div>
            <div class="userDetails">
                <p class="name" id="name">Pepper Potts</p>
                <p class="email" id="email">pepper@pots.com</p>
                <p class="phoneNo" id="phone">0777171717</p>
                <p class="edit-button" onclick="toggleCard()">Edit Details</p>
            </div>

            <div class="welcomeMessage welcomeMessage-right">
                <p class="accountText">Trust Bitcoin! It's better than your bank :)</p>
            </div>
        </div>


        <!-- Create User Section -->
        <div class="createUser card">
            <h2 class="card-title">Create User</h2>

            <form class="createUserForm" id="createUserForm">
                <div class="row">
                    <div class="input-container">
                        <input placeholder="Name" type="text" id="nameInput">
                    </div>
                    <div class="input-container">
                        <input placeholder="Email" type="email" id="emailInput">
                    </div>
                </div>
                <div class="input-container">
                    <input placeholder="Address" type="text" id="addressInput">
                </div>
                <div class="row">
                    <div class="input-container">
                        <input placeholder="Phone Number" type="tel" id="phoneInput">
                    </div>
                    <div class="input-container">
                        <input placeholder="Profile Picture URL" type="text" id="pictureInput">
                    </div>
                </div>
                <div class="row">
                    <div class="input-container">
                        <input placeholder="Password" type="password" id="passwordInput">
                    </div>
                </div>
                <div class="error-message"></div>
                <button class="submit" type="button" onclick="signUp()">Create Account</button>
            </form>

        </div>

        <!-- User Management Section -->
        <div class="userManagement card">
            <h2>User Management</h2>

            <!-- Search Users -->
            <div class="search-users">
                <div class="search-input">
                    <input type="text" id="searchUserInput" placeholder="Search users..." >
                </div>
                <div class="search-button">
                    <button onclick="searchUsers()">Search</button>
                </div>
            </div>

            <!-- User Listing -->
            <div class="user-list" style="float: right;">

                <table>
                    <thead>
                        <tr>
                            <th>Acc. No</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="userTableBody">
                        
                    </tbody>
                </table>

                <!-- Buttons on the right side, stacked on top of each other -->
                <div class="action-buttons">
                    <button onclick="editUser">Edit</button>
                    <button onclick="resetPassword">Reset</button>

                </div>
            </div>
        </div>



        <!-- Transaction Management Section -->
        <div class="transactionManagement card">
            <h2>Transaction Management</h2>

            <!-- Search Transactions -->
            <div class="search-transactions">
                <div class="search-input">
                    <input type="text" id="searchTransactionInput" placeholder="Search transactions...">
                </div>
                <div class="search-button">
                    <button onclick="searchTransactions()">Search</button>
                </div>
            </div>

            <!-- Filter and Sort Options -->
            <div class="filter-sort-options">
                <label for="filterByStatus">Filter by Status:</label>
                <select id="filterByStatus">
                    <option value="all">All</option>
                    <option value="pending">Pending</option>
                    <option value="completed">Completed</option>
                    <!-- Add more status options as needed -->
                </select>

                <label for="sortBy">Sort by:</label>
                <select id="sortBy">
                    <option value="date">Date</option>
                    <option value="amount">Amount</option>
                    <!-- Add more sorting options as needed -->
                </select>
            </div>

            <!-- Transaction Listing -->
            <div class="transaction-list">
                <!-- Display a table or list of transaction records here -->
                <table>
                    <thead>
                        <tr>
                            <th>Transaction ID</th>
                            <th>User ID</th>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>101</td>
                            <td>1</td>
                            <td>2023-10-14</td>
                            <td>$50.00</td>
                            <td>Completed</td>
                        </tr>
                        <!-- Add more transaction rows as needed -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Activity Logs Section -->
        <div class="activityLogs card">
            <h2 class="section-title">Activity Logs</h2>

            <pre class="log-console">
            <code id="logs">
[Log ID 1] AdminUser123: Modified user profile - 2023-10-14 10:30 AM
[Log ID 2] AdminUser456: Created new user account - 2023-10-14 11:15 AM
[Log ID 3] AdminUser789: Updated system settings - 2023-10-14 12:00 PM</code>
    </pre>
        </div>

        <script>

            var user;

            document.addEventListener("DOMContentLoaded", function () {

                var cookieData = document.cookie
                    .split('; ')
                    .find((row) => row.startsWith("user="))
                    .split('=')[1];

                if (cookieData) {
                    var jsonData = JSON.parse(cookieData);


                    fetchUserDetails(jsonData.email);



                    console.log(jsonData);
                }
            });

            function fetchUserDetails(email) {

                fetch("http://localhost:5237/bankApi/getUser?email=" + email)
                    .then(async response => {
                        if (response.ok) {
                            user = await response.json();
                            console.log(user);
                            document.getElementById("name").textContent = user.name;
                            document.getElementById("email").textContent = user.email;
                            document.getElementById("phone").textContent = user.phone;
                        }
                        else {
                            alert("Invalid Account Number");
                        }
                    })
                    .catch(error => {
                        console.log(error);
                    });
            }

            function signUp() {


                var name = document.getElementById("nameInput").value;
                var email = document.getElementById("emailInput").value;
                var address = document.getElementById("addressInput").value;
                var phone = parseInt(document.getElementById("phoneInput").value);
                var picture = document.getElementById("pictureInput").value;
                var password = document.getElementById("passwordInput").value;

                var data = {
                    "name": name,
                    "email": email,
                    "address": address,
                    "phone": phone,
                    "picture": picture,
                    "password": password
                };

                fetch("http://localhost:5237/bankApi/signup", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(data)
                })
                    .then(async response => {
                        clearForm();
                        if (response.ok) {
                            var result = await response.json();
                            console.log(result);

                            alert("User Created Successfully");
                            logActions("User Created Successfully");
                        }
                        else {
                            alert("Invalid Account");
                            logActions("Invalid Account");
                        }
                    })
                    .catch(error => {
                        console.log(error);
                    });
            }

            function clearForm() {
                document.getElementById("nameInput").value = "";
                document.getElementById("emailInput").value = "";
                document.getElementById("addressInput").value = "";
                document.getElementById("phoneInput").value = "";
                document.getElementById("pictureInput").value = "";
                document.getElementById("passwordInput").value = "";
            }

            function searchUsers() {
                var query = document.getElementById("searchUserInput").value;

                fetch("http://localhost:5237/bankApi/search?term=" + query)
                    .then(async response => {
                        if (response.ok) {
                            user = await response.json();
                            console.log(user);
                            const accounts = user.accounts;
                            console.log(accounts);
                            var tableBody = document.getElementById("userTableBody");

                            tableBody.innerHTML = "";

                            accounts.forEach(account => {
                                tableBody.innerHTML += `
                                    <tr>
                                        <td>${account.accountNo}</td>
                                        <td>${user.name}</td>
                                        <td>${user.email}</td>


                                                    <td class="buttonCell" >${account.status === 0 ? `<button style="background-color: red;" onclick="alert('works')">Deactivate</button>` : `<button style="background-color: green;" onclick="alert('works')">Activate</button>`}</td>

                                    </tr>`;
                            });
                        } else {
                            alert("Invalid Account Number");
                        }
                    })
                    .catch(error => {
                        console.log(error);
                    });
            }

            function deactivateUser(userId) {
                // Implement the user deactivation logic here
            }


            function logActions(string) {
                var logs = document.getElementById("logs");
                logs.innerHTML += `${string} <br>`;


            }

            function toggleCard() {

                document.getElementById("popup").classList.toggle("popupShow")

            }
        </script>
</body>
</html>
