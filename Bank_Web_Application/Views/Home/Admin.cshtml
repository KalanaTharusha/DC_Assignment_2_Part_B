@{
    ViewData["Title"] = "Admin Page";
}


<!DOCTYPE html>
<html lang="en">
<head>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">


    <title>Admin Dashboard</title>
    <style>
        body {
            background: radial-gradient(328px at 2.9% 15%, rgb(191, 224, 251) 0%, rgb(232, 233, 251) 25.8%, rgb(252, 239, 250) 50.8%, rgb(234, 251, 251) 77.6%, rgb(240, 251, 244) 100.7%);
            background-size: cover;
        }

        .card {
            height: auto;
            background: white;
            color: black;
            border-radius: 12px;
            box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.123);
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: flex-start;
            transition-duration: .5s;
        }

        .profileImage {
            width: 160px;
            height: 160px;
            border-radius: 50%;
            overflow: hidden;
            margin: 20px;
        }

            .profileImage img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

        .userDetails {
            width: 50%;
            text-align: left;
            padding: 20px;
            display: flex;
            flex-direction: column;
            justify-content: left;
        }

        .welcomeMessage {
            text-align: right;
            margin-top: 10px;
            margin-right: 20px;
        }

            .welcomeMessage.welcomeMessage-right {
                font-size: 2rem;
                font-weight: 500;
                text-align: right;
                margin-top: auto;
                margin-right: 20px;
                position: absolute;
                top: 0;
                right: 10px;
                bottom: 0;
                display: flex;
                align-items: center;
                background: linear-gradient(45deg, #655de8, #4F46E5);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
            }

        .edit-button {
            font-weight: 500;
            font-size: 0.8em;
            cursor: pointer;
            color: #4F46E5;
            text-align: left;
            margin-top: 20px;
        }


        .name {
            font-size: 1.5em;
            font-weight: 700;
            color: black;
            letter-spacing: 0.5px;
            margin-bottom: 2px;
        }

        .email, .phoneNo {
            font-size: 0.84em;
            color: black;
            letter-spacing: 0.2px;
            margin-bottom: 2px;
        }

        .profile-card {
            display: flex;
            flex-direction: row;
            width: 100%;
            margin-bottom: 10px;
        }

        .createUser {
            background-color: #f5f5f5;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            align-items: center; 
            margin-bottom: 10px;
        }

        .card-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 15px;
        }

        .form {
            position: relative;
            margin: auto;
            margin-top: 5rem;
            background-color: #fff;
            display: block;
            padding: 1rem;
            max-width: 350px;
            border-radius: 0.5rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }

        .form-title {
            font-size: 1.25rem;
            line-height: 1.75rem;
            font-weight: 600;
            text-align: center;
            color: #000;
        }

        .input-container {
            position: relative;
            width: 100%;
        }

            .input-container input, .form button {
                outline: none;
                border: 1px solid #e5e7eb;
                margin: 8px 0;
            }

            .input-container input {
                background-color: #fff;
                padding: 1rem;
                font-size: 0.875rem;
                line-height: 1.25rem;
                width: 100%;
                border-radius: 0.5rem;
                box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            }


        .submit {
            display: block;
            padding: 0.75rem 1.25rem;
            background-color: #4F46E5;
            color: #ffffff;
            font-size: 0.875rem;
            line-height: 1.25rem;
            font-weight: 500;
            width: 100%;
            border-radius: 0.5rem;
            text-transform: uppercase;
        }



        .userManagement {
            display: flex;
            justify-content: space-around;
            background-color: #f5f5f5;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 10px;
        }

        h2 {
            font-size: 1.5rem;
            color: #333;
            margin-bottom: 15px;
            margin-right: 20px;
        }

        .userManagement button {
            padding: 10px 20px;
            background-color: #4F46E5;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-right: 5px;
        }

        .create-user-button {
            font-weight: bold;
            cursor: pointer;
            color: #4F46E5;
            position: absolute;
            top: 0;
            left: 0;
        }

        .userManagement .user-list {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
        }

            .userManagement .user-list .action-buttons {
                margin-top: 5px; 
            }

                .userManagement .user-list .action-buttons button {
                    margin-bottom: 5px;
                }

        .search-users {
            display: flex;
            flex-direction: column;
            margin-bottom: 15px;
            margin-right: 20px;
        }

        .search-input {
            display: flex;
        }

            .search-input input {
                flex: 1;
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 5px;
                outline: none;
            }

        .search-button button {
            padding: 10px;
            background-color: #4F46E5;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
            width: 100%;
        }




        button {
            padding: 10px 20px;
            color: white;
            border: none;
            border-radius: 5px;
            margin: 10px 0px;
            cursor: pointer;
        }

            button:hover {
                background-color: #655de8;
            }



        table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
        }

            table th, table td {
                border: 1px solid #ccc;
                padding: 10px;
                text-align: left;
            }

        thead {
            background-color: #4F46E5;
            color: black;
        }

        tr:nth-child(even) {
            background-color: #f5f5f5;
        }

        tr:nth-child(odd) {
            background-color: #fff;
        }

        .transactionManagement {
            display: flex;
            justify-content: space-around;
            background-color: #f5f5f5;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 10px;
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
        }

            .transactionManagement h2 {
                font-size: 1.5rem;
                color: #333;
            }

        .search-transactions {
            display: flex;
            flex-direction: column;
            margin-bottom: 15px;
        }

        .search-input {
            display: flex;
        }

            .search-input input {
                flex: 1;
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 5px;
                outline: none;
            }

        .search-button button {
            padding: 10px;
            background-color: #4F46E5;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
            width: 100%; 
        }

        .edit-button button {
            padding: 10px;
            background-color: #4F46E5;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 3px;
            width: 100%; 
        }

        .transaction-list table {
            width: 100%;
            border-collapse: collapse;
        }

        .transaction-list th, .transaction-list td {
            border: 1px solid #ccc;
            padding: 10px;
            text-align: left;
        }



        .filter-sort-options {
            margin: 10px 0;
            display: flex;
            width: 100%;
            flex-direction: column;
            align-items: flex-start;
        }

            .filter-sort-options label, .filter-sort-options select {
                margin-bottom: 4px; 
                font-size: 16px; 
            }


            .filter-sort-options select {
                border: 1px solid #ccc;
                border-radius: 5px;
                padding: 8px;
                width: 100%;
            }


   

        .transaction-list table {
            width: 100%;
            border-collapse: collapse;
            background-color: white;
        }

            .transaction-list table th, .transaction-list table td {
                border: 1px solid #ccc;
                padding: 10px;
                text-align: left;
            }

        .transaction-list thead {
            background-color: #4F46E5;
            color: black;
        }

        .transaction-list tr:nth-child(even) {
            background-color: #f5f5f5;
        }

        .transaction-list tr:nth-child(odd) {
            background-color: #fff;
        }



        .activityLogs {
            background-color: #f5f5f5;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 10px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .section-title {
            font-size: 1.5rem;
            color: #333;
            margin-bottom: 15px;
        }

        .log-console {
            background-color: black;
            color: #00FF00;
            padding: 10px;
            border-radius: 5px;
            white-space: pre-wrap;
            max-height: 200px;
            width: 90%;
            overflow-y: auto;
            font-family: monospace;
        }

            .log-console code {
                font-family: monospace;
            }

        .popupContainer {
            position: fixed;
            display: none;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            z-index: 10;
            top: 0;
            left: 0;
        }



        .popupCard {
            max-height: 50vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 2rem;
            border-radius: 15px;
            background-color: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }

        .popupCloseBtn {
            color: darkgrey;
            position: absolute;
            top: 5%;
            right: 5%;
            border: none;
            background-color: transparent;
        }

        .editField {
            width: 100%;
            padding: 10px;
            margin: 5px;
            border: 1px solid #ccc;
            border-radius: 10px;
        }

        .editFieldLabel {
            border: none;
            margin: 5px;
        }

        .sendButton {
            width: 100%;
            padding: 10px;
            margin: 5px;
            border: 1px solid #ccc;
            border-radius: 10px;
            background-color: #4F46E5;
            color: white;
            cursor: pointer;
        }

        .error-message {
            color: red;
            margin-top: 5px;
        }

        .editTitle {
            font-size: 1.5em;
            margin-top: 20px;
            font-weight: bold;
        }

        .buttonCell {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .editUser {
            position: fixed;
            display: none;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            z-index: 10;
            top: 0;
            left: 0;
        }

        .editUserForm {
            display: flex;
            width: 50%;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 2rem;
            border-radius: 15px;
            background-color: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }

        .popupShow {
            display: flex;
        }

        .error-container {
            position: fixed;
            bottom: 0;
            right: -100%;
            background-color: #A91B0D;
            color: white;
            text-align: center;
            transition: right 0.5s ease-in-out;
            width: 320px;
            padding: 12px;
            margin-bottom: 1.3rem;
            margin-right: 1.5rem;
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: start;
            background: #EF665B;
            border-radius: 8px;
            box-shadow: 0px 0px 5px -3px #111;
            z-index: 100;
        }


        .error-text {
            font-weight: 500;
            margin: 0;
        }

    </style>
</head>
<body>
    <div id="errorContainer" class="error-container">
        <p id="errorText" class="error-text"></p>
    </div>

    <div class="popupContainer" id="popup">
        <div class="popupCard card">
            <button class="popupCloseBtn" onclick="toggleCard()">X</button>
            <div class="edit">
                <p class="editTitle">Edit Details</p>
                <p class="editFieldLabel">Password</p>
                <input type="text" id="password" class="editField">
                <p class="editFieldLabel">Confirm Password</p>
                <input type="text" id="confirmPassword" class="editField">
                <button class="sendButton" onclick="resetPassword()">Edit</button>
                <p id="errorMessage" class="error-message"></p>
            </div>
        </div>
    </div>

    <div class="editUser" id="editUser">
        <form class="createUserForm editUserForm" id="updateUserForm">
            <button type="button" class="popupCloseBtn" onclick="toggleEditUser()">X</button>
            <h2 class="card-title">Update User</h2>
            <div class="input-container">
                <input placeholder="Name" type="text" id="editNameInput">
            </div>
            <div class="input-container">
                <input placeholder="Email" type="email" id="editEmailInput">
            </div>

            <div class="input-container">
                <input placeholder="Address" type="text" id="editAddressInput">
            </div>

            <div class="input-container">
                <input placeholder="Phone Number" type="tel" id="editPhoneInput">
            </div>
            <div class="input-container">
                <input placeholder="Profile Picture URL" type="text" id="editPictureInput">
            </div>

            <div class="input-container">
                <input placeholder="Password" type="password" id="editPasswordInput">
            </div>

            <div class="error-message"></div>
            <button class="submit" type="button" onclick="editUser()">Update Account</button>
        </form>
    </div>


    <div class="card-container">
        <div class="profile-card card">
            <div class="profileImage">

                <img src="https://source.unsplash.com/400x400/?portrait" alt="Profile Image">

            </div>
            <div class="userDetails">
                <p class="name" id="name">Pepper Potts</p>
                <p class="email" id="email">pepper@pots.com</p>
                <p class="phoneNo" id="phone">0777171717</p>
                <p class="edit-button" onclick="toggleCard()">Edit Details</p>
            </div>

            <div class="welcomeMessage welcomeMessage-right">
                <p class="accountText"><b>Trust Bitcoin!</b> It's better than your bank :)</p>

            </div>
        </div>


        <div class="createUser card">
            <h2 class="card-title">Create User</h2>

            <form class="createUserForm" id="createUserForm">
                <div class="row">
                    <div class="input-container">
                        <input placeholder="Name" type="text" id="nameInput">
                    </div>
                    <div class="input-container">
                        <input placeholder="Email" type="email" id="emailInput">
                    </div>
                </div>
                <div class="input-container">
                    <input placeholder="Address" type="text" id="addressInput">
                </div>
                <div class="row">
                    <div class="input-container">
                        <input placeholder="Phone Number" type="tel" id="phoneInput">
                    </div>
                    <div class="input-container">
                        <input placeholder="Profile Picture URL" type="text" id="pictureInput">
                    </div>
                </div>
                <div class="row">
                    <div class="input-container">
                        <input placeholder="Password" type="password" id="passwordInput">
                    </div>
                </div>
                <div class="error-message"></div>
                <button class="submit" type="button" onclick="signUp()">Create Account</button>
            </form>

        </div>

        <div class="userManagement card">
            <h2>User Management</h2>

            <div class="search-users">
                <div class="search-input">
                    <input type="text" id="searchUserInput" placeholder="Search users...">
                </div>
                <div class="search-button">
                    <button onclick="searchUsers()">Search</button>
                    <button style="margin-top: 1px" onclick="toggleEditUser()">Edit</button>
                    <button onclick="createAccount()">Create Account</button>
                </div>
            </div>

            <div class="user-list" style="float: right;">

                <table>
                    <thead>
                        <tr>
                            <th>Acc. No</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="userTableBody">
                    </tbody>
                </table>
            </div>
        </div>



        <div class="transactionManagement card">
            <h2>Transaction Management</h2>

            <div class="search-transactions">
                <div class="search-input">
                    <input type="text" id="searchTransactionInput" placeholder="Search transactions...">
                </div>
                <div class="search-button">
                    <button onclick="searchUserTransaction()">Search</button>

                </div>

                <div class="filter-sort-options">
                    <label for="filterByStatus">Filter by Status:</label>
                    <select id="filterByStatus" onchange="filterOnChangeListener()">
                        <option value="All">All</option>
                        <option value="Withdrawals">Withdrawals</option>
                        <option value="Deposits">Deposits</option>
                    </select>

                    <label for="sortBy">Sort by:</label>
                    <select id="sortBy" onchange="sortOnChangeListener()">
                        <option value="None">None</option>
                        <option value="Date">Date - Newest to Oldest</option>

                    </select>
                </div>
            </div>


            <div class="transaction-list">

                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Description</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody id="transactionTableBody">
                        <tr>

                        </tr>
                        
                    </tbody>
                </table>
            </div>
        </div>


        <div class="activityLogs card">
            <h2 class="section-title">Activity Logs</h2>

            <pre class="log-console">
            <code id="logs">
            <br>
            </code>
    </pre>
        </div>

        <script>

            var user;
            var searchUser;
            var result;
            var transactions;

            function displayErrorMessageBox(message, timeout) {
                const errorContainer = document.getElementById("errorContainer");
                const errorText = document.getElementById("errorText");

                errorText.textContent = message;


                errorContainer.style.right = "0";

                if (timeout) {
                    setTimeout(function () {

                        errorContainer.style.right = "-100%";
                        setTimeout(function () {
                            errorText.textContent = '';
                        }, 500);
                    }, timeout);
                }
            }

            document.addEventListener("DOMContentLoaded", function () {

                var cookieData = document.cookie
                    .split('; ')
                    .find((row) => row.startsWith("user="))
                    .split('=')[1];

                if (cookieData) {
                    var jsonData = JSON.parse(cookieData);


                    fetchUserDetails(jsonData.email);



                    console.log(jsonData);
                }
            });

            function fetchUserDetails(email) {

                fetch("http://localhost:5237/bankApi/getUser?email=" + email)
                    .then(async response => {
                        if (response.ok) {
                            user = await response.json();
                            console.log(user);
                            document.getElementById("name").textContent = user.name;
                            document.getElementById("email").textContent = user.email;
                            document.getElementById("phone").textContent = user.phone;
                        }
                        else {
                            alert("Invalid Account Number");
                        }
                    })
                    .catch(error => {
                        console.log(error);
                    });
            }

            function signUp() {
                var name = document.getElementById("nameInput").value;
                var email = document.getElementById("emailInput").value;
                var address = document.getElementById("addressInput").value;
                var phone = parseInt(document.getElementById("phoneInput").value);
                var picture = document.getElementById("pictureInput").value;
                var password = document.getElementById("passwordInput").value;

                var data = {
                    "name": name,
                    "email": email,
                    "address": address,
                    "phone": phone,
                    "picture": "https://source.unsplash.com/400x400/?portrait",
                    "password": password
                };

                fetch("http://localhost:5237/bankApi/signup", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(data)
                })
                    .then(async response => {
                        clearForm();
                        if (response.ok) {
                            var result = await response.json();
                            console.log(result);

                            displayErrorMessageBox("User Created Successfully", 3000);
                            logActions("User Created Successfully");
                        }
                        else {
                            displayErrorMessageBox("Invalid Account", 3000);
                            logActions("Invalid Account");
                        }
                    })
                    .catch(error => {
                        console.log(error);
                    });
            }

            function clearForm() {
                document.getElementById("nameInput").value = "";
                document.getElementById("emailInput").value = "";
                document.getElementById("addressInput").value = "";
                document.getElementById("phoneInput").value = "";
                document.getElementById("pictureInput").value = "";
                document.getElementById("passwordInput").value = "";
            }

            function searchUsers() {
                var query = document.getElementById("searchUserInput").value;



                fetch("http://localhost:5237/bankApi/search?term=" + query)
                    .then(async response => {
                        if (response.ok) {
                            searchUser = await response.json();
                            console.log(searchUser);
                            const accounts = searchUser.accounts;
                            console.log(accounts);
                            var tableBody = document.getElementById("userTableBody");

                            tableBody.innerHTML = "";

                            accounts.forEach(account => {
                                tableBody.innerHTML += `
                                                                                                <tr>
                                                                                                    <td>${account.accountNo}</td>
                                                                                                    <td>${searchUser.name}</td>
                                                                                                    <td>${searchUser.email}</td>
                                                                                                    <td class="buttonCell" >${account.status === 0 ? `<button style="background-color: red;" onclick="toggleUserAccount(${account.accountId})">Deactivate</button>` : `<button style="background-color: green;" onclick="toggleUserAccount(${account.accountId})">Activate</button>`}</td>
                                                                                                </tr>`;
                            });
                        } else {
                            displayErrorMessageBox("Invalid Account Number", 3000);
                        }
                    })
                    .catch(error => {
                        console.log(error);
                    });
            }



            function editUser() {

                searchUser.name = document.getElementById("editNameInput").value;
                searchUser.email = document.getElementById("editEmailInput").value;
                searchUser.address = document.getElementById("editAddressInput").value;
                searchUser.phone = parseInt(document.getElementById("editPhoneInput")).value;
                searchUser.picture = document.getElementById("editPictureInput").value;
                searchUser.password = document.getElementById("editPasswordInput").value;

                console.log(searchUser);

                fetch("http://localhost:5237/bankApi/updateUser", {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(searchUser)
                })
                    .then(async response => {
                        if (response.ok) {
                            var result = await response.json();
                            console.log(result);
                            toggleEditUser();
                            displayErrorMessageBox("User Updated Successfully", 2500);
                            
                        }
                        else {
                            displayErrorMessageBox("Invalid Account", 2500);
                            
                        }
                    })
                    .catch(error => {
                        console.log(error);
                    });

            }

            function resetPassword() {
                var password = document.getElementById("password").value;
                var confirmPassword = document.getElementById("confirmPassword").value;

                if (password !== confirmPassword) {
                    displayErrorMessageBox("Passwords do not match", 3000);
                }
                else {

                    user.password = password;

                    fetch("http://localhost:5237/bankApi/updateUser", {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(user)
                    })
                        .then(async response => {
                            if (response.ok) {
                                var result = await response.json();
                                console.log(result);
                                displayErrorMessageBox("User Updated Successfully", 3000);

                                document.getElementById("password").value = "";
                                document.getElementById("confirmPassword").value = "";
                                toggleCard();
                                logActions("User Updated Successfully");
                            }
                            else {
                                displayErrorMessageBox("Invalid Account", 3000);

                            }
                        })
                        .catch(error => {
                            console.log(error);
                        });
                }
            }

            function createAccount() {

                fetch("http://localhost:5237/bankApi/createAccount?userId=" + searchUser.userId, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    }
                })
                    .then(async response => {
                        if (response.ok) {
                            var result = await response.json();
                            searchUsers();
                            displayErrorMessageBox("Account Created Successfully! ", 3000);
                        }
                        else {
                            displayErrorMessageBox("Invalid Account", 3000);
                        }
                    })
                    .catch(error => {
                        console.log(error);
                    });

            }

            function toggleUserAccount(accountId) {
                fetch("http://localhost:5237/bankApi/toggleAccount?accId=" + accountId, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json"
                    }
                })
                    .then(async response => {
                        if (response.ok) {
                            searchUsers();

                            displayErrorMessageBox("User Deactivated Successfully", 3000);
                        }
                        else {
                            displayErrorMessageBox("Invalid Account", 3000);
                            
                        }
                    })
                    .catch(error => {
                        console.log(error);
                    });

            }

            function refreshLogs() {

                fetch("http://localhost:5237/bankApi/getLogs")
                    .then(async response => {
                        if (response.ok) {
                            var result = await response.json();

                            var logs = document.getElementById("logs");
                            logs.innerHTML = "";
                            result.forEach(log => {
                                logs.innerHTML += `${log.timeStamp} : ${log.action} - ${log.logMessage}<br>`;
                            });
                        }
                        else {
                            displayErrorMessageBox("Invalid Account", 3000);
                        }
                    })
                    .catch(error => {
                        console.log(error);
                    });
            }

            setInterval(refreshLogs, 2500);

            function toggleCard() {
                document.getElementById("popup").classList.toggle("popupShow")
            }

            function toggleEditUser() {
                var name = document.getElementById("editNameInput");
                var email = document.getElementById("editEmailInput");
                var address = document.getElementById("editAddressInput");
                var phone = parseInt(document.getElementById("editPhoneInput"));
                var picture = document.getElementById("editPictureInput");
                var password = document.getElementById("editPasswordInput");

                name.value = searchUser.name;
                email.value = searchUser.email;
                address.value = searchUser.address;
                phone.value = searchUser.phone;
                picture.value = searchUser.picture;
                password.value = searchUser.password;

                document.getElementById("editUser").classList.toggle("popupShow")
            }

            function searchUserTransaction() {
                var query = document.getElementById("searchTransactionInput").value;


                fetch("http://localhost:5237/bankApi/getTransactions?no=" + query)
                    .then(async response => {
                        if (response.ok) {
                            result = await response.json();
                            transactions = result;
                            console.log(result);
                            var tableBody = document.getElementById("transactionTableBody");

                            tableBody.innerHTML = "";

                            result.forEach(transaction => {
                                tableBody.innerHTML += `
                                                                                                <tr>
                                                                                                    <td>${transaction.dateTime}</td>
                                                                                                    <td>${transaction.description}</td>
                                                                                                    <td>${transaction.amount}</td>
                                                                                                </tr>`;
                            });
                        } else {
                            alert("Invalid Account Number");
                        }
                    })
                    .catch(error => {
                        console.log(error);
                    });


            }

            function sortOnChangeListener() {
                var query = document.getElementById("sortBy").value;

                console.log(query);
                if (query === "Date") {
                    result.sort(function (a, b) {

                        return new Date(b.dateTime) - new Date(a.dateTime);
                    });
                }
                else if (query === "None") {
                    result.sort(function (a, b) {
                        return new Date(a.dateTime) - new Date(b.dateTime);
                    });
                }
                var tableBody = document.getElementById("transactionTableBody");

                tableBody.innerHTML = "";
                result.forEach(transaction => {
                    tableBody.innerHTML += `
                                                                                                            <tr>
                                                                                                                <td>${transaction.dateTime}</td>
                                                                                                                <td>${transaction.description}</td>
                                                                                                                <td>${transaction.amount}</td>
                                                                                                            </tr>`;
                });
            }

            function filterOnChangeListener() {
                var query = document.getElementById("filterByStatus").value;

                if (query === "Withdrawals") {
                    result = transactions;
                    result = result.filter(t => t.amount < 0)
                }
                else if (query === "Deposits") {
                    result = transactions;
                    result = result.filter(t => t.amount > 0)
                }
                else if (query === "All") {
                    result = transactions;
                }
                var tableBody = document.getElementById("transactionTableBody");

                tableBody.innerHTML = "";
                result.forEach(transaction => {
                    tableBody.innerHTML += `
                                                                                                                        <tr>
                                                                                                                            <td>${transaction.dateTime}</td>
                                                                                                                            <td>${transaction.description}</td>
                                                                                                                            <td>${transaction.amount}</td>
                                                                                                                        </tr>`;
                });


            }




        </script>
</body>
</html>
