@{
    ViewData["Title"] = "User Dashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Dashboard</title>
    <style>
        body {
            background: radial-gradient(328px at 2.9% 15%, rgb(191, 224, 251) 0%, rgb(232, 233, 251) 25.8%, rgb(252, 239, 250) 50.8%, rgb(234, 251, 251) 77.6%, rgb(240, 251, 244) 100.7%);
            background-size: cover;
        }
  

        .error-message {
            color: #A91B0D;
            margin-left: 0.5rem;
            font-weight: 500;
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
        }
        .card {
            height: auto;
            background: white;
            color: black;
            border-radius: 12px;
            box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.123);
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: flex-start;
            transition-duration: 0.5s;
        }

        .welcomeMessage {
            text-align: right;
            margin-top: 10px;
            margin-right: 20px;
        }

            .welcomeMessage.welcomeMessage-right {
                font-size: 2rem;
                text-align: right;
                margin-top: auto;
                margin-right: 20px;
                position: absolute;
                top: 0;
                right: 10px;
                bottom: 0;
                display: flex;
                align-items: center;
                background: linear-gradient(45deg, #655de8, #4F46E5);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
            }




        .profileImage {
            border-radius: 50%;
            overflow: hidden;
            margin-left: 10px;
        }

            .profileImage img {
                width: 100%;
                height: 100%;
                object-fit: cover;
                object-position: center top;
            }




        .userDetails {
            text-align: left;
            padding: 10px;
            display: flex;
            flex-direction: column;
        }

        .edit-button {
            font-weight: 700;
            font-size: 0.8em;
            cursor: pointer;
            color: #4F46E5;
            text-align: left;
            margin-top: 20px;
        }

            .edit-button:hover {
                color: #655de8;
            }

        .name {
            font-size: 1.5em;
            font-weight: 700;
            margin-bottom: 2px;
            color: black;
        }

        .email, .phoneNo {
            font-size: 0.84em;
            color: black;
            letter-spacing: 0.2px;
            margin-bottom: 2px;
        }

        .profile-card {
            display: flex;
            flex-direction: row;
            width: 25%;
            margin-bottom: 10px;
        }

        .accountCard {
            width: 75%;
            background: white;
            color: black;
            margin-left: 10px;
            margin-bottom: 10px;
        }

        .accountInfo {
            text-align: left;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }

        .accountDetailsTitle {
            font-size: 1.5rem;
            font-weight: 700;
            color: black;
            letter-spacing: 0.5px;
        }

        .accountTitle, .accountText {
            font-size: 1em;
            font-weight: 600;
            color: black;
            letter-spacing: 0.5px;
            margin-bottom: 2px;
            margin-left: 10px;
        }

        .accountText {
            font-size: 0.85em;
            color: black;
            font-weight: 400;
            letter-spacing: 0.2px;
            margin-bottom: 5px;
            margin-left: 10px;
        }


        .card-container {
            display: flex;
            flex-direction: row;
        }

        .transferMoney {
            width: 100%;
            text-align: left;
            padding: 20px;
            display: flex;
            flex-direction: column;
        }

        .transferTitle {
            font-size: 1.5rem;
            font-weight: 700;
            color: black;
            letter-spacing: 0.5px;
        }

        .formField {
            font-size: 0.84em;
            color: black;
            letter-spacing: 0.2px;
            margin-bottom: 10px;
        }

        .sendButton {
            font-weight: 600;
            background-color: #4F46E5;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
        }

            .sendButton:hover {
                background-color: #655de8;
            }

        .clearfix::after {
            content: "";
            clear: both;
            display: table;
        }

        .transferCard {
            display: flex;
            flex-direction: column;
            width: 25%;
        }

        .formField {
            width: 100%;
            padding: 10px;
            margin: 5px;
            border: 1px solid #ccc;
            border-radius: 10px;
        }

        .formFieldLabel {
            border: none;
            margin-bottom: 1px;
            margin-top: 5px;
        }

        .transactionCard {
            width: 75%;
            background: white;
            color: black;
            border-radius: 12px;
            box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.123);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            transition-duration: 0.5s;
            margin-left: 10px;
        }

        .transactionDetails {
            width: 100%;
            text-align: left;
            padding: 20px;
            display: flex;
            flex-direction: column;
            justify-content: left;
        }

        .transactionTitle {
            font-size: 1.5em;
            font-weight: 700;
            color: black;
            letter-spacing: 0.5px;
            border-bottom: 1px solid black;
            padding-bottom: 10px;
            margin-bottom: 10px;
        }

        .transactionTable {
            width: 100%;
            border-collapse: collapse;
        }

            .transactionTable th, .transactionTable td {
                border: 1px solid transparent;
                padding: 8px;
                text-align: left;
                color: black;
            }

            .transactionTable th {
                background: white;
                font-weight: 700;
                letter-spacing: 0.5px;
            }

            .transactionTable tr:nth-child(even), .transactionTable tr:nth-child(odd) {
                background: white;
            }

        .scrollable-table {
            max-height: 270px;
            overflow: auto;
        }

        .popupContainer {
            position: fixed;
            display: none;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            z-index: 10;
            top: 0;
            left: 0;
        }

        .popupShow {
            display: flex;
        }

        .popupCard {
            max-height: 50vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 2rem;
            border-radius: 15px;
            background-color: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }

        .popupCloseBtn {
            position: absolute;
            top: 5%;
            right: 5%;
            border: none;
            background-color: transparent;
        }

        .editField {
            width: 100%;
            padding: 10px;
            margin: 5px;
            border: 1px solid #ccc;
            border-radius: 10px;
        }

        .editFieldLabel {
            border: none;
            margin: 5px;
        }

        .sendButton {
            width: 100%;
            padding: 10px;
            margin: 5px;
            border: 1px solid #ccc;
            border-radius: 10px;
            background-color: #4F46E5;
            color: white;
            cursor: pointer;
        }



        .editTitle {
            font-size: 1.5em;
            margin-top: 20px;
            font-weight: bold;
        }

        .error-container {
            position: fixed;
            bottom: 0;
            right: -100%; 
            background-color: #A91B0D;
            color: white;
            text-align: center;
            transition: right 0.5s ease-in-out;
            width: 320px;
            padding: 12px;
            margin-bottom: 1.3rem;
            margin-right: 1.5rem;
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: start;
            background: #EF665B;
            border-radius: 8px;
            box-shadow: 0px 0px 5px -3px #111;
            z-index: 100;
        }


        .error-text {
            font-weight: 500;
            margin: 0;
        }


    </style>


</head>
<body>
    <div class="popupContainer" id="popup">
        <div class="popupCard card">
            <button class="popupCloseBtn" onclick="toggleCard()">X</button>
            <div class="edit">
                <p class="editTitle">Edit Details</p>
                <p class="editFieldLabel">Password</p>
                <input type="password" id="password" class="editField">
                <p class="editFieldLabel">Confirm Password</p>
                <input type="password" id="confirmPassword" class="editField">
                <button class="sendButton" onclick="resetPassword()">Edit</button>
                <p id="errorMessage" class="error-message"></p>
            </div>
        </div>
    </div>

    <div class="card-container">

        <div class="profile-card card">
            <div class="profileImage">

                <img src="https://source.unsplash.com/400x400/?portrait" alt="Profile Image">

            </div>

            <div class="userDetails">
                <p class="name" id="name">Pepper Potts</p>
                <p class="email" id="email">pepper@pots.com</p>
                <p class="phoneNo" id="phone">0777171717</p>
                <p class="edit-button" onclick="toggleCard()">Edit Details</p>
            </div>
        </div>

        <div class="accountCard card">
            <div class="accountInfo">
                <p class="accountDetailsTitle">Account Details</p>
                <div class="account-details">
                    <div class="account-detail">
                        <p class="accountTitle">Account Number</p>
                        <select id="mapAccountId" class="formField" onchange="updateBalance()">
                            
                        </select>

                    </div>
                    <div class="account-detail">
                        <p class="accountTitle">Current Balance</p>
                        <p class="accountText" id="accountBalance">$ 0</p>
                    </div>
                </div>
                <div class="welcomeMessage welcomeMessage-right">
                    
                    <p class="accountText"><b>Trust Bitcoin!</b> It's better than your bank :)</p>

                </div>
            </div>
        </div>
    </div>


    <div class="card-container">
        <div class="transferCard card">
            <div class="transferMoney">
                <p class="transferTitle">Transfer Money</p>
                
                <p class="formFieldLabel">Account Number</p>
                <input type="text" id="recieverAccountNumber" class="formField">
                <p class="formFieldLabel">Amount</p>
                <input type="text" id="recieverAmount" class="formField">
                <p class="formFieldLabel">Description</p>
                <textarea id="recieverDescription" class="formField"></textarea>
                <p id="errorMessage" class="error-message"></p>
                <button class="sendButton" onclick="sendTransaction()">Send</button>
                
            </div>
        </div>


        <div class="transactionCard card">
            <div class="transactionDetails">
                <p class="transactionTitle">Transaction History</p>
                <div class="scrollable-table">
                    <table class="transactionTable" id="transactions">
                        <tr>
                            <th>Transaction Date</th>
                            <th>Description</th>
                            <th>Amount</th>
                        </tr>
                        
                    </table>
                </div>
            </div>
        </div>

    </div>

    <div id="errorContainer" class="error-container">
        <p id="errorText" class="error-text"></p>
    </div>


    <script>

        var user;
        var personalTransactions;

        function displayErrorMessageBox(message, timeout, isError) {
            const errorContainer = document.getElementById("errorContainer");
            const errorText = document.getElementById("errorText");

            if (!isError) {
                errorContainer.style.backgroundColor = "#4CAF50";
            } else {
                errorContainer.style.backgroundColor = "#EF665B";
            }

            errorText.textContent = message;

            
            errorContainer.style.right = "0";

            if (timeout) {
                setTimeout(function () {
                    
                    errorContainer.style.right = "-100%"; 
                    setTimeout(function () {
                        errorText.textContent = ''; 
                    }, 500); 
                }, timeout);
            }
        }

        function displayErrorMessage(message, timeout) {
            const errorMessageElement = document.getElementById("errorMessage");
            errorMessageElement.textContent = message;
            errorMessageElement.style.opacity = 1;
            setTimeout(function () {
                errorMessageElement.style.opacity = 0; 
                setTimeout(function () {
                    errorMessageElement.textContent = ''; 
                }, 500); 
            }, timeout);
        }

        document.addEventListener("DOMContentLoaded", function () {

            var cookieData = document.cookie
                .split('; ')
                .find((row) => row.startsWith("user="))
                .split('=')[1];

            if (cookieData) {
                var jsonData = JSON.parse(cookieData);


                fetchUserDetails(jsonData.email);



                console.log(jsonData);
            }
        });

        function fetchUserDetails(email) {
            fetch("http://localhost:5237/bankApi/getUser?email=" + email)
                .then(async response => {
                    if (response.ok) {
                        user = await response.json();
                        console.log(user);
                        document.getElementById("name").textContent = user.name;
                        document.getElementById("email").textContent = user.email;
                        document.getElementById("phone").textContent = user.phone;

                        const accountSelect = document.getElementById("mapAccountId");
                        accountSelect.innerHTML = user.accounts.map(account => {
                            return `<option value="${account.accountNo}">${account.accountNo}</option>`;
                        }).join('');

                        
                        const defaultAccountId = user.accounts[0].accountNo;

                        document.getElementById("accountBalance").textContent = 'LKR ' + user.accounts[0].balance;
                        fetchAccounts(defaultAccountId);

                    } else {
                        displayErrorMessageBox('Invalid Account', 5000, true);
                    }
                })
                .catch(error => {
                    console.log(error);
                });
        }

        function updateBalance() {

            const accountNo = document.getElementById("mapAccountId").value;
            const accountData = user.accounts.find(account => account.accountNo == accountNo);
            document.getElementById("accountBalance").textContent = 'LKR ' + accountData.balance;


            fetchAccounts(accountNo);


        }


        function fetchAccounts(accountNo) {

            fetch("http://localhost:5237/bankApi/getTransactions?no=" + accountNo)
                .then(async response => {
                    if (response.ok) {
                        const jsondata = await response.json();

                        console.log(jsondata);
                        var transactionTable = jsondata;
                        document.getElementById("transactions").innerHTML =
                            `<tr>
                                            <th>Transaction Date</th>
                                                <th>Description</th>
                                                <th>Amount</th>
                                                </tr>`;
                        document.getElementById("transactions").innerHTML += transactionTable.map(transaction => {
                            return `<tr>
                                                            <td>${transaction.dateTime}</td>
                                                            <td>${transaction.description}</td>
                                                            <td>LKR ${transaction.amount}</td>
                                                            </tr>`;
                        }).join('');
                    }
                    else {
                        alert("Invalid Account Number");
                    }
                })
                .catch(error => {
                    console.log(error);
                });
        }

        function sendTransaction() {

            const accountNumber = document.getElementById("recieverAccountNumber").value;
            const amount = parseFloat(document.getElementById("recieverAmount").value);
            const description = document.getElementById("recieverDescription").value;

            console.log(accountNumber, amount, description);

            postTransaction(accountNumber, amount, description);

        }

        function postTransaction() {
            const now = new Date();
            const date = now.toISOString();
            const accountNumber = document.getElementById("recieverAccountNumber").value;
            const amount = parseFloat(document.getElementById("recieverAmount").value);
            const description = document.getElementById("recieverDescription").value;

            const a = document.getElementById("mapAccountId").value;
            var accountData = user.accounts.find(account => account.accountNo == a);

            fetch("http://localhost:5237/bankApi/transfer?to=" + accountNumber, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    "amount": amount,
                    "accountId": parseInt(accountData.accountId),
                    "description": description,
                    "dateTime": date
                })
            })
                .then(response => {
                    if (response.ok) {
                        displayErrorMessageBox('Transaction Successful!', 5000, false);
                    }
                    else{
                        displayErrorMessageBox('Transaction Failed', 5000, true);
                        throw new Error('Request failed with status: ' + response.status);
                    }
                    return response.json();
                })
                .then(data => {
                    
                    document.getElementById("recieverAccountNumber").value = "";
                    document.getElementById("recieverAmount").value = "";
                    document.getElementById("recieverDescription").value = "";
                    
                })
                .catch(error => {
                    displayErrorMessageBox('Transaction Failed', 5000, true);
                });
        }


        function toggleCard() {

            document.getElementById("popup").classList.toggle("popupShow")

        }

        function resetPassword() {
            var password = document.getElementById("password").value;
            var confirmPassword = document.getElementById("confirmPassword").value;

            if (!password || !confirmPassword) {
                displayErrorMessage('Fields cannot be empty', 3000);
            }
            else {
                if (password !== confirmPassword) {
                    displayErrorMessage('Passwords do no match', 3000);
                }
                else {

                    user.password = password;

                    fetch("http://localhost:5237/bankApi/updateUser", {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(user)
                    })
                        .then(async response => {
                            if (response.ok) {
                                var result = await response.json();
                                console.log(result);
                                displayErrorMessageBox('Password Updated', 5000, false);
                                

                                document.getElementById("password").value = "";
                                document.getElementById("confirmPassword").value = "";
                                toggleCard();
                                logActions("Password Updated Successfully");
                            }
                            else {
                                displayErrorMessageBox('Invalid Account', 5000, true);

                            }
                        })
                        .catch(error => {
                            console.log(error);
                        });
                }
            }
        }


    </script>

</body>
</html>